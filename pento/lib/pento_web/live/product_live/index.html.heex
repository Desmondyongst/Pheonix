<%!-- Generally speaking, this template has three different sections 1. ...heading... 2. ...product...list... 3. ...modal form... --%>



<%!-- Look at this <.header> ... syntax as a function call to the header component.  --%>
<%!-- The header component can be found in deps/phoenix/priv/templates/phx.gen.live/core_components.ex --%>
<.header>
  Listing Products
  <%!-- <h1><%= @greeting %></h1> --%>
  <:actions>
    <.link patch={~p"/products/new"}>
      <.button>New Product</.button>
    </.link>
  </:actions>
</.header>

<%!-- The table is a component with attributes for id, rows, and row_click. --%>
<%!-- The rows attribute `rows={@streams.products}` has a list of items, and each one will be used to produce a row. --%>
<%!-- When a user clicks a row, it will call JS.navigate with the route to show a product. --%>

<.table
  id="products"
  rows={@streams.products}
  row_click={fn {_id, product} -> JS.navigate(~p"/products/#{product}") end}
>
  <%!-- :col slot will implement a new column  --%>
  <%!-- Under the hood, the table/1 function component iterates over the list of items
  in the @rows assignment and renders a table cell for each row/column combination.
  It yields each element in the @rows list back up to the index template and sets it
  equal to the product variable via the let assignment. --%>

  <:col :let={{_id, product}} label="Name"><%= product.name %></:col>
  <:col :let={{_id, product}} label="Description"><%= product.description %></:col>
  <:col :let={{_id, product}} label="Unit price"><%= product.unit_price %></:col>
  <:col :let={{_id, product}} label="Sku"><%= product.sku %></:col>
  <:action :let={{_id, product}}>
    <div class="sr-only">
      <.link navigate={~p"/products/#{product}"}>Show</.link>
    </div>
    <%!-- Our HEEx template has an :action slot for each product in @products. --%>
    <.link patch={~p"/products/#{product}/edit"}>Edit</.link>
  </:action>
  <:action :let={{id, product}}>
    <.link
      phx-click={JS.push("delete", value: %{id: product.id}) |> hide("##{id}")}
      data-confirm="Are you sure?"
    >
      Delete
    </.link>
  </:action>
</.table>

<%!-- :if is a directive and the element wil show only if the associated value is true --%>
<.modal :if={@live_action in [:new, :edit]} id="product-modal" show on_cancel={JS.patch(~p"/products")}>
<%!-- The outer modal provides a window that the user can show and hide.
The inner component provides a form for editing new projects and creating new ones. --%>
<%!-- It uses the value of @product.id if it exists, otherwise it sets it to :new. --%>
  <.live_component
    module={PentoWeb.ProductLive.FormComponent}
    id={@product.id || :new}
    title={@page_title}
    action={@live_action}
    product={@product}
    patch={~p"/products"}
  />
</.modal>
